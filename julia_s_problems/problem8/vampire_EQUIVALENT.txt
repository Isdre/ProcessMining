% Running in auto input_syntax mode. Trying TPTP
% Refutation found. Thanks to Tanya!
% SZS status Theorem for tptp_EQUIVALENT
% SZS output start Proof for tptp_EQUIVALENT
3. ? [X0] : x2_s(X0) [input]
5. ! [X1] : (x2_s(X1) => ((? [X4] : (test_repair(X4) | l_s(X4)) & ~? [X3] : tau(X3)) | (~? [X2] : (test_repair(X2) | l_s(X2)) & ? [X0] : tau(X0)))) [input]
46. ! [X0] : ~(a2_e(X0) & (a2_e(X0) | a2_s(X0) | x2_e(X0) | x2_s(X0))) [input]
49. ! [X1] : ((test_repair(X1) | l_s(X1) | tau(X1)) => ? [X0] : x2_e(X0)) [input]
85. ! [X1] : ((x2_e(X1) | l_s(X1)) => ? [X0] : test_repair(X0)) [input]
100. ! [X1] : ((test_repair(X1) | l_s(X1)) => ? [X0] : a2_e(X0)) [input]
114. ! [X0] : (x2_s(X0) => ((? [X1] : (test_repair(X1) | l_s(X1)) & ~? [X2] : tau(X2)) | (~? [X3] : (test_repair(X3) | l_s(X3)) & ? [X4] : tau(X4)))) [rectify 5]
132. ! [X0] : ((test_repair(X0) | l_s(X0) | tau(X0)) => ? [X1] : x2_e(X1)) [rectify 49]
143. ! [X0] : ((x2_e(X0) | l_s(X0)) => ? [X1] : test_repair(X1)) [rectify 85]
148. ! [X0] : ((test_repair(X0) | l_s(X0)) => ? [X1] : a2_e(X1)) [rectify 100]
155. ! [X0] : (((? [X1] : (test_repair(X1) | l_s(X1)) & ! [X2] : ~tau(X2)) | (! [X3] : (~test_repair(X3) & ~l_s(X3)) & ? [X4] : tau(X4))) | ~x2_s(X0)) [ennf transformation 114]
156. ! [X0] : ((? [X1] : (test_repair(X1) | l_s(X1)) & ! [X2] : ~tau(X2)) | (! [X3] : (~test_repair(X3) & ~l_s(X3)) & ? [X4] : tau(X4)) | ~x2_s(X0)) [flattening 155]
201. ! [X0] : (~a2_e(X0) | (~a2_e(X0) & ~a2_s(X0) & ~x2_e(X0) & ~x2_s(X0))) [ennf transformation 46]
204. ! [X0] : (? [X1] : x2_e(X1) | (~test_repair(X0) & ~l_s(X0) & ~tau(X0))) [ennf transformation 132]
237. ! [X0] : (? [X1] : test_repair(X1) | (~x2_e(X0) & ~l_s(X0))) [ennf transformation 143]
254. ! [X0] : (? [X1] : a2_e(X1) | (~test_repair(X0) & ~l_s(X0))) [ennf transformation 148]
265. ? [X0] : x2_s(X0) => x2_s(sK0) [choice axiom]
266. x2_s(sK0) [skolemisation 3,265]
269. ? [X1] : (test_repair(X1) | l_s(X1)) => (test_repair(sK2) | l_s(sK2)) [choice axiom]
270. ? [X4] : tau(X4) => tau(sK3) [choice axiom]
271. ! [X0] : (((test_repair(sK2) | l_s(sK2)) & ! [X2] : ~tau(X2)) | (! [X3] : (~test_repair(X3) & ~l_s(X3)) & tau(sK3)) | ~x2_s(X0)) [skolemisation 156,270,269]
315. ? [X1] : x2_e(X1) => x2_e(sK29) [choice axiom]
316. ! [X0] : (x2_e(sK29) | (~test_repair(X0) & ~l_s(X0) & ~tau(X0))) [skolemisation 204,315]
347. ? [X1] : test_repair(X1) => test_repair(sK46) [choice axiom]
348. ! [X0] : (test_repair(sK46) | (~x2_e(X0) & ~l_s(X0))) [skolemisation 237,347]
359. ? [X1] : a2_e(X1) => a2_e(sK53) [choice axiom]
360. ! [X0] : (a2_e(sK53) | (~test_repair(X0) & ~l_s(X0))) [skolemisation 254,359]
378. x2_s(sK0) [cnf transformation 266]
383. test_repair(sK2) | l_s(sK2) | tau(sK3) | ~x2_s(X0) [cnf transformation 271]
460. ~a2_e(X0) | ~a2_e(X0) [cnf transformation 201]
466. x2_e(sK29) | ~tau(X0) [cnf transformation 316]
530. test_repair(sK46) | ~x2_e(X0) [cnf transformation 348]
555. a2_e(sK53) | ~l_s(X0) [cnf transformation 360]
556. a2_e(sK53) | ~test_repair(X0) [cnf transformation 360]
3581. ~a2_e(X0) [duplicate literal removal 460]
3583. 1 <=> ! [X0] : ~x2_s(X0) [avatar definition]
3584. ~x2_s(X0) <- (1) [avatar component clause 3583]
3586. 2 <=> ! [X3] : ~test_repair(X3) [avatar definition]
3587. ~test_repair(X3) <- (2) [avatar component clause 3586]
3589. 3 <=> l_s(sK2) [avatar definition]
3591. l_s(sK2) <- (3) [avatar component clause 3589]
3593. 4 <=> test_repair(sK2) [avatar definition]
3595. test_repair(sK2) <- (4) [avatar component clause 3593]
3598. 5 <=> ! [X3] : ~l_s(X3) [avatar definition]
3599. ~l_s(X3) <- (5) [avatar component clause 3598]
3602. 6 <=> tau(sK3) [avatar definition]
3604. tau(sK3) <- (6) [avatar component clause 3602]
3605. 1 | 6 | 3 | 4 [avatar split clause 383,3593,3589,3602,3583]
3607. 7 <=> ! [X2] : ~tau(X2) [avatar definition]
3608. ~tau(X2) <- (7) [avatar component clause 3607]
3625. 11 <=> ! [X0] : ~x2_e(X0) [avatar definition]
3626. ~x2_e(X0) <- (11) [avatar component clause 3625]
3667. 21 <=> ! [X0] : ~a2_e(X0) [avatar definition]
3668. ~a2_e(X0) <- (21) [avatar component clause 3667]
3799. 21 [avatar split clause 3581,3667]
3809. 50 <=> x2_e(sK29) [avatar definition]
3811. x2_e(sK29) <- (50) [avatar component clause 3809]
3814. 7 | 50 [avatar split clause 466,3809,3607]
3904. 68 <=> test_repair(sK46) [avatar definition]
3906. test_repair(sK46) <- (68) [avatar component clause 3904]
3907. 11 | 68 [avatar split clause 530,3904,3625]
3948. 76 <=> a2_e(sK53) [avatar definition]
3950. a2_e(sK53) <- (76) [avatar component clause 3948]
3951. 2 | 76 [avatar split clause 556,3948,3586]
3952. 5 | 76 [avatar split clause 555,3948,3598]
7436. $false <- (3, 5) [subsumption resolution 3591,3599]
7437. ~3 | ~5 [avatar contradiction clause 7436]
7438. $false <- (21, 76) [subsumption resolution 3950,3668]
7439. ~21 | ~76 [avatar contradiction clause 7438]
7440. $false <- (2, 68) [subsumption resolution 3906,3587]
7441. ~2 | ~68 [avatar contradiction clause 7440]
7442. $false <- (11, 50) [subsumption resolution 3811,3626]
7443. ~11 | ~50 [avatar contradiction clause 7442]
7448. $false <- (6, 7) [subsumption resolution 3604,3608]
7449. ~6 | ~7 [avatar contradiction clause 7448]
7450. $false <- (1) [resolution 3584,378]
7453. ~1 [avatar contradiction clause 7450]
7454. $false <- (2, 4) [subsumption resolution 3595,3587]
7455. ~2 | ~4 [avatar contradiction clause 7454]
7456. $false [avatar sat refutation 3605,3799,3814,3907,3951,3952,7437,7439,7441,7443,7449,7453,7455]
% SZS output end Proof for tptp_EQUIVALENT
% ------------------------------
% Version: Vampire 4.9 (commit 5ad494e78 on 2024-06-14 14:05:27 +0100)
% Linked with Z3 4.12.3.0 79bbbf76d0c123481c8ca05cd3a98939270074d3 z3-4.8.4-7980-g79bbbf76d
% Termination reason: Refutation

% Memory used [KB]: 3227
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------

perf_event_open failed (instruction limiting will be disabled): Permission denied
(If you are seeing 'Permission denied' ask your admin to run 'sudo sysctl -w kernel.perf_event_paranoid=-1' for you.)
